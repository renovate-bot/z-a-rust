#autoload
# -*- mode: zsh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
# vim: ft=zsh sw=2 ts=2 et
#
# Copyright (c) 2021 Z-Shell Community

→za-rust-atclone-handler() {

  builtin emulate -RL zsh ${=${options[xtrace]:#off}:+-o xtrace}
  builtin setopt extendedglob warncreateglobal typesetsilent noshortloops

  typeset -g za_rust_ef
  za_rust_ef=( ${(k)functions} )
  trap "unset -f -- \"\${(k)functions[@]:|za_rust_ef}\" &>/dev/null; unset za_rust_ef" EXIT
  trap "unset -f -- \"\${(k)functions[@]:|za_rust_ef}\" &>/dev/null; unset za_rust_ef; return 1" INT

  [[ "$1" = plugin ]] && \
  local type="$1" user="$2" plugin="$3" id_as="$4" dir="$5" hook="$6" || \
  local type="$1" url="$2" id_as="$3" dir="$4" hook="$5"

  if [[ $OSTYPE == cygwin ]]; then
    dir=`cygpath -w $dir`
  fi

  local nl=$'\n'

  if (( ${+ICE[rustup]} )) {
    if [[ $hook = *atclone-<-> ]] {
      (
        builtin cd -q "$dir" || {
          +zi-message "{annex}rust-annex{ehi}:{rst} {error}An internal error, please report at: {url}https://github.com/z-shell/z-a-rust/issues{rst}"
          return 1
        }
        command mkdir -p bin rustup
        .z-a-rust-download-file-stdout 'https://sh.rustup.rs' 0 >! bin/rustup-init || \
        {
          .z-a-rust-download-file-stdout 'https://sh.rustup.rs' 1 >! bin/rustup-init || \
          {
            +zi-message "{annex}rust-annex{ehi}:{rst} {error}Could not download the {pname}rustup.rs{error} installer{rst}"
            return 0
          }
        }
        command chmod +x bin/rustup-init
        local -x CARGO_HOME="$dir" RUSTUP_HOME="$dir/rustup"
        if (( !OPTS[opt_-q,--quiet] )) {
          +zi-message "{annex}rust-annex{ehi}:{rst} Running the rustup installer…{rst}"
          bin/rustup-init -y --no-modify-path |& command grep -E '(installing|installed)'
          bin/rustup component remove rust-docs
        } else {
          bin/rustup-init -y --no-modify-path &> /dev/null
          bin/rustup component remove rust-docs &> /dev/null
        }
      ) || return 0
    } else {
      (
        builtin cd -q "$dir" || {
          +zi-message "{annex}rust-annex{ehi}:{rst} {error}An internal error, please report at: {url}https://github.com/z-shell/z-a-rust/issues{rst}"
          return 1
        }
        local -x CARGO_HOME="$dir" RUSTUP_HOME="$dir/rustup" PATH="$dir/bin:$PATH"
        if (( !OPTS[opt_-q,--quiet] )) {
          +zi-message "{annex}rust-annex{ehi}:{rst} Running \`rustup update'…{rst}"
          command rustup update |& command grep -E -i '(error|warning|installing|info: latest update )'
        } else {
          command rustup update &> /dev/null
        }
      )
    }
  }

  if [[ -n "${ICE[cargo]}" ]] {
    local -a cargo_defs bin_pkg_dst tmpsdst cargos
    cargo_defs=( "${(s.;.)ICE[cargo]}" )

    local cargo

    for cargo ( $cargo_defs ) {
      bin_pkg_dst=( ${(@s.->.)cargo} )
      tmpsdst=( ${(@s.<-.)bin_pkg_dst[1]} )
      if (( ${#tmpsdst} > 1 )); then
        bin_pkg_dst=( "${tmpsdst[1]}" "${tmpsdst[2]}" "${bin_pkg_dst[2]:-${tmpdist[2]#\!}}" )
      else
        bin_pkg_dst=( "${tmpsdst[1]#\!}" "${tmpsdst[1]}" "${bin_pkg_dst[2]:-${bin_pkg_dst[1]#\!}}" )
      fi
      bin_pkg_dst=( "${bin_pkg_dst[@]//((#s)[[:space:]]##|[[:space:]]##(#e))/}" )
      bin_pkg_dst[2]=${bin_pkg_dst[2]#\!}
      bin_pkg_dst[1]=${bin_pkg_dst[1]##[a-zA-Z]##:}
      bin_pkg_dst[2]=${bin_pkg_dst[2]##[a-zA-Z]##:}
      bin_pkg_dst[3]=${bin_pkg_dst[3]##[a-zA-Z]##:}
      cargos+=( ${bin_pkg_dst[2]} )
    }

    (( ${#cargos} )) && {
      if [[ "$hook" = *atclone-<-> ]]; then
        +zi-message "{annex}rust-annex{ehi}:{rst} Instaling the requested crates…{rst}"
        if (( ${+ICE[rustup]} )) {
          local -x CARGO_HOME="$dir" RUSTUP_HOME="$dir/rustup" PATH="$dir/bin:$PATH"
          command $dir/bin/cargo install --force --root "$dir" "${cargos[@]}"
        } else {
          cargo install --force --root "$dir" "${cargos[@]}"
        }
      elif [[ "$hook" = *atpull-<-> ]]; then
        if (( !OPTS[opt_-q,--quiet] )) {
          +zi-message "{annex}rust-annex{ehi}:{rst} Updating the installed crates…{rst}"
        }
        local toml_dir
        local -a tomls
        tomls=( "$dir"/**/Cargo.toml(N.) )
        for toml_dir ( ${tomls:h} ) {
          (
            builtin cd -q "$toml_dir" && {
              if (( ${+ICE[rustup]} )) {
                local -x CARGO_HOME="$dir" RUSTUP_HOME="$dir/rustup" PATH="$dir/bin:$PATH"
                command $dir/bin/cargo update
                command $dir/bin/cargo build
              } else {
                cargo update
                cargo build
              }
            }
          )
        }
      fi
    }
  }

  if [[ -n "${ICE[cargo]}" ]] {
    local -a cargos bin_pkg_dst
    cargos=( "${(s.;.)ICE[cargo]}" )

    local cargo

    for cargo ( $cargos ) {
      integer set_rust_home_vars=0 \
      set_gem_home=0 set_node_path=0 set_cwd=0 \
      use_all_null=0 use_err_null=0 use_out_null=0

      bin_pkg_dst=( ${(@s.->.)cargo} )
      bin_pkg_dst=( "${bin_pkg_dst[@]//((#s)[[:space:]]##|[[:space:]]##(#e))/}" )
      tmpsdst=( ${(@s.<-.)bin_pkg_dst[1]} )
      tmpsdst=( "${tmpsdst[@]//((#s)[[:space:]]##|[[:space:]]##(#e))/}" )
      if (( ${#tmpsdst} > 1 )); then
        bin_pkg_dst=( "${tmpsdst[1]}" "${tmpsdst[2]}" "${bin_pkg_dst[2]:-${tmpdist[2]#\!}}" )
      else
        bin_pkg_dst=( "${tmpsdst[1]#\!}" "${tmpsdst[1]}" "${bin_pkg_dst[2]:-${bin_pkg_dst[1]#\!}}" )
      fi
      bin_pkg_dst=( "${bin_pkg_dst[@]//((#s)[[:space:]]##|[[:space:]]##(#e))/}" )
      if [[ ${bin_pkg_dst[2]} = \!* ]]; then
        bin_pkg_dst[2]=${bin_pkg_dst[2]#\!}
        [[ ${bin_pkg_dst[2]} = [gncNEO]#R[gncNEO]#:* ]] && set_rust_home_vars=1
        [[ ${bin_pkg_dst[2]} = [gncNEO]#g[gncNEO]#:* ]] && set_gem_home=1
        [[ ${bin_pkg_dst[2]} = [gncNEO]#n[gncNEO]#:* ]] && set_node_path=1
        [[ ${bin_pkg_dst[2]} = [gncNEO]#c[gncNEO]#:* ]] && set_cwd=1
        [[ ${bin_pkg_dst[2]} = [gncNEO]#N[gncNEO]#:* ]] && use_all_null=1
        [[ ${bin_pkg_dst[2]} = [gncNEO]#E[gncNEO]#:* ]] && use_err_null=1
        [[ ${bin_pkg_dst[2]} = [gncNEO]#O[gncNEO]#:* ]] && use_out_null=1
        bin_pkg_dst[1]=${bin_pkg_dst[1]##[a-zA-Z]##:}
        bin_pkg_dst[2]=${bin_pkg_dst[2]##[a-zA-Z]##:}
        bin_pkg_dst[3]=${bin_pkg_dst[3]##[a-zA-Z]##:}
      else
        continue
      fi

      local target_binary="${${(M)bin_pkg_dst[1]:#/*}:-$dir/bin/${bin_pkg_dst[1]}}" \
        fnam="${bin_pkg_dst[3]:-${bin_pkg_dst[1]:t}}"
      local file="$ZPFX/bin/$fnam"

      .za-rust-bin-or-src-function-body 0 "$fnam" "$target_binary" "$dir" \
      "${${(M)set_rust_home_vars:#1}:-${+ICE[rustup]}}" \
      "$set_gem_home" "$set_node_path" "$set_cwd" \
      "$use_all_null" "$use_err_null" "$use_out_null"

      builtin print -r -- "#!/usr/bin/env zsh$nl$nl$REPLY$nl$nl$fnam \"\$@\"" >! "$file"
      command chmod +x "$file"

      if [[ -x $file ]]; then
        if (( !OPTS[opt_-q,--quiet] )); then
          if [[ $hook == atclone-<-> || $ZI[annex-multi-flag:pull-active] -ge 1 ]]; then
            +zi-message "{annex}rust-annex{ehi}:{rst} ${${hook:#*atclone-<->}:+Re-}Created the {pname}${fnam}{rst} shim"
          fi
        fi
      else
        +zi-message "{annex}rust-annex{ehi}:{rst} {error}Something went wrong while creating the {pname}${fnam}{rst} shim"
      fi
    }
  }
}
